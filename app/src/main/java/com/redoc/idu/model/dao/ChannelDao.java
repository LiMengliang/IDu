package com.redoc.idu.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.redoc.idu.model.bean.Channel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL".
*/
public class ChannelDao extends AbstractDao<Channel, Long> {

    public static final String TABLENAME = "CHANNEL";

    /**
     * Properties of entity Channel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CHANNEL_NAME = new Property(1, String.class, "CHANNEL_NAME", false, "CHANNEL__NAME");
        public final static Property CATEGORY_ID = new Property(2, String.class, "CATEGORY_ID", false, "CATEGORY__ID");
        public final static Property CAN_CACHE = new Property(3, Boolean.class, "CAN_CACHE", false, "CAN__CACHE");
        public final static Property FOLLOWED = new Property(4, Boolean.class, "FOLLOWED", false, "FOLLOWED");
        public final static Property LINK = new Property(5, String.class, "LINK", false, "LINK");
        public final static Property WEIGHT = new Property(6, Integer.class, "WEIGHT", false, "WEIGHT");
    };


    public ChannelDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHANNEL__NAME\" TEXT," + // 1: CHANNEL_NAME
                "\"CATEGORY__ID\" TEXT," + // 2: CATEGORY_ID
                "\"CAN__CACHE\" INTEGER," + // 3: CAN_CACHE
                "\"FOLLOWED\" INTEGER," + // 4: FOLLOWED
                "\"LINK\" TEXT," + // 5: LINK
                "\"WEIGHT\" INTEGER);"); // 6: WEIGHT
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Channel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CHANNEL_NAME = entity.getCHANNEL_NAME();
        if (CHANNEL_NAME != null) {
            stmt.bindString(2, CHANNEL_NAME);
        }
 
        String CATEGORY_ID = entity.getCATEGORY_ID();
        if (CATEGORY_ID != null) {
            stmt.bindString(3, CATEGORY_ID);
        }
 
        Boolean CAN_CACHE = entity.getCAN_CACHE();
        if (CAN_CACHE != null) {
            stmt.bindLong(4, CAN_CACHE ? 1L: 0L);
        }
 
        Boolean FOLLOWED = entity.getFOLLOWED();
        if (FOLLOWED != null) {
            stmt.bindLong(5, FOLLOWED ? 1L: 0L);
        }
 
        String LINK = entity.getLINK();
        if (LINK != null) {
            stmt.bindString(6, LINK);
        }
 
        Integer WEIGHT = entity.getWEIGHT();
        if (WEIGHT != null) {
            stmt.bindLong(7, WEIGHT);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Channel readEntity(Cursor cursor, int offset) {
        Channel entity = new Channel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CHANNEL_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CATEGORY_ID
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // CAN_CACHE
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // FOLLOWED
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LINK
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // WEIGHT
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Channel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCHANNEL_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCATEGORY_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCAN_CACHE(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setFOLLOWED(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLINK(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWEIGHT(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Channel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Channel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
